{"meta":{"title":"Landscape -- PeterZ","subtitle":null,"description":null,"author":"Peter Zheng","url":"https://anix30.github.io"},"pages":[{"title":"about","date":"2019-05-16T06:12:49.000Z","updated":"2019-05-16T06:12:50.000Z","comments":true,"path":"about/index.html","permalink":"https://anix30.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Git Basic Knowledge","slug":"Git-Basic-Knowledge","date":"2020-12-29T11:45:19.000Z","updated":"2020-12-29T12:00:04.323Z","comments":true,"path":"Git-Basic-Knowledge/","link":"","permalink":"https://anix30.github.io/Git-Basic-Knowledge/","excerpt":"","text":"Installing GitInstalling on Linux If you’re on Fedora (or any closely-related RPM-based distribution, such as RHEL or CentOS), you can use dnf: 1$ sudo dnf install git-all If you’re on a Debian-based distribution, such as Ubuntu, try apt: 1$ sudo apt install git-all Installing on macOS Homebrew1$ brew install git or XcodeApple ships a binary package of Git with Xcode. Installing on WindowsThere are also a few ways to install Git on Windows. The most official build is available for download on the Git website. Just go to https://git-scm.com/download/win and the download will start automatically. 1. Getting a Git Repository1.1 Initializing a Repository in an Existing DirectoryIf you have a project directory that is currently not under version control and you want to startcontrolling it with Git, you first need to go to that project’s directory. 12$ cd /Users/user/my_projec$ git init 1.2 Cloning an Existing Repository12$ git clone &lt;url&gt;$ git clone https://github.com/libgit2/libgit2 2. Recording Changes to the RepositoryEach file in the working directory can be in one of two states: tracked or untracked. Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about. Untracked files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area. 2.1 Checking the Status of Your FilesThe main tool you use to determine which files are in which state is the git status command. $ git statusOn branch masterYour branch is up-to-date with ‘origin/master’.nothing to commit, working directory clean This means none of your tracked files are modified. 2.1.1 Tracking New FilesMake a new file README, then add it to the TRACKING status. $ git add README $ git statusOn branch masterYour branch is up-to-date with ‘origin/master’.Changes to be committed: (use “git restore –staged …” to unstage) new file: README 2.1.2 Staging Modified FilesChange a file that was already tracked, run the ‘git status’ command. $ git statusOn branch masterYour branch is up-to-date with ‘origin/master’.Changes to be committed:(use “git reset HEAD …” to unstage) new file: README Changes not staged for commit:(use “git add …” to update what will be committed)(use “git checkout – …” to discard changes in working directory) modified: CONTRIBUTING.md 2.1.3 Short StatusIf you run ‘git status -s‘ or ‘git status –short‘ you get a far more simplified output from the command: $ git status -sM READMEMM RakefileA lib/git.rbM lib/simplegit.rb?? LICENSE.txt New files that aren’t tracked have a ?? next to them, new files that have been added to the staging area have an A, modified files have an M and so on. 2.2 Viewing Your Staged and Unstaged ChangesIf you want to know exactly what you changed, not just which files were changed — you can use the ‘git diff‘ command. git diff — only changes that are still unstaged. git diff --staged(or --cached) — compares your staged changes to your last commit: 2.3 Committing Your Changes The simplest way to commit is to type ‘git commit‘. Doing so launches your editor of choice (For example: Vim).$ git commit you can pass the _-v_ option to ‘git commit‘.$ git commit -v you can type your commit message inline with the ‘commit’ command by specifying it after a ‘-m’ flag,$ git commit -m &quot;Story 182: fix benchmarks for speed&quot; Adding the ‘-a’ option to the ‘git commit’ command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the ‘git add’ part$ git commit -a -m &#39;Add new benchmarks&#39; 2.4 Removing Files $ git rm \\&lt;filename&gt; — removes the file from your working directory and remove it from your tracked files $ rm \\&lt;filename&gt;— just removes the file from your working directory 2.5 Moving Files$ git mv file_from file_to is equivalent to running something like \\$ mv file_from file_to\\$ git rm file_from\\$ git add file_to 3. Viewing the Commit History $ git log — lists the commits made in that repository in reversechronological order $ git log -p(or --patch) — shows the difference (the patch output)introduced in each commit. $ git log --stat — show the abbreviated stats for each commit $ git log --pretty=oneline — The oneline value for thisoption prints each commit on a single line $ git log --pretty=format:&quot;%h - %an, %ar : %s&quot; — allows you to specify your own log output format $ git log --graph — adds a nice little ASCII graph showing your branch and merge history $ git log -&lt;n&gt; — Show only the last n commits $ git log --since, --after — Limit the commits to those made after the specified date. $ git log --since, --after — Limit the commits to those made before the specified date. $ git log --graph — Only show commits in which the author entry matches the specified string. $ git log --committer — Only show commits in which the committer entry matches the specified string. $ git log --grep — Only show commits with a commit message containing the string 4. Undoing things with git restore $ git restore --staged &lt;file&gt; — transfer stageing file to unstage $ git restore &lt;file&gt;...— Unmodify a Modified File 5. Working with Remotes5.1 Showing the Remotes $ git remote — show the remote name $ git remote -v — shows the remote URLs 5.2 Adding Remote Repositories git remote add &lt;shortname&gt; &lt;url&gt; — add a new remote Git repository as a shortname you can reference easily5.3 Fetching and Pulling from Your Remotes $ git fetch &lt;remote&gt; — get data from your remote projects, it doesn’t automatically merge it $ git pull &lt;remote&gt; — automatically fetch and then merge that remote branch into your current branch5.4 Pushing to Your Remotes git push &lt;remote&gt; &lt;branch&gt; — push your branch to your origin server 6. Git Aliases$ git config --global alias.lg &#39;log --pretty=format:&quot;%h - %an, %ar : %s&quot;&#39;","categories":[],"tags":[],"keywords":[]},{"title":"Use Hexo to Deploy to GitHub Pages","slug":"Use-hexo-to-deploy-to-GitHub-Pages","date":"2019-05-16T02:21:33.000Z","updated":"2019-05-16T11:38:22.000Z","comments":true,"path":"Use-hexo-to-deploy-to-GitHub-Pages/","link":"","permalink":"https://anix30.github.io/Use-hexo-to-deploy-to-GitHub-Pages/","excerpt":"","text":"Hexo DocumentsHexo troubleshooting The Enviroment Windows 10 or Mac 10.14 Mojave Node.js 10.15 npm 6.4 git 2.16 1 – Create a Project for GitHub PagesThe official tutorial for create a GitHub Pages First you have to create a repository whose name must be ‘username.github.io’. If you already have a github account, you can create repository directly, else you need to register a new github accout first.Head over to GitHub and create a new repository named ‘username.github.io’, where username is your username (or organization name) on GitHub.Then the ‘username.github.io’ is your website address, and this is also your hexo projectname. If the first part of the repository doesn’t exactly match your username, it won’t work, so make sure to get it right. 2 – Install Hexo1$ sudo npm install -g hexo-cli 3 – Initialize the Hexo projectGo to the folder where you want to store hexo.1$ hexo init [projectname] 4 – Clone the repositoryGo to the folder where you want to store your project, and clone the new repository: 1$ git clone https://github.com/username/username.github.io Copy all the files from your hexo folder into github pages project folder. 5 – Run a test server for your page on Mac12$ cd [project isolate or reletive path]$ hexo server 6 – Set information for your new blogLook for the document about how to set information of your blog1234567891011121314151617$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Sitetitle: [The title of your website]subtitle:[The subtitle of your website]description: [The description of your website]author: [Your name]language: zh, entimezone: Asia/Shanghai# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yourusername.github.io/root: /permalink: :year/:month/:day/:title/permalink_defaults: 7 – Set information to use Git Install the plugin for deploy the blog by git12$ cd [project isolate or reletive path]$ npm install hexo-deployer-git --save Set _config.yml12345678$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:yourusername/yourusername.github.io.git branch: master Relace the repo and brench with your own. Note: sometimes there will be an error while you want to deploy to GitHub Pages.12345678$ hexo deployFATAL Something\\'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: Spawn failedat ChildProcess. (D:\\Hexo\\Hexo\\node_modules\\hexo-util\\lib\\spawn.js:52:19)at ChildProcess.emit (events.js:189:13)at ChildProcess.cp.emit (D:\\Hexo\\Hexo\\node_modules\\cross-spawn\\lib\\enoent.js:40:29)at Process.ChildProcess._handle.onexit (internal/child_process.js:248:12) To fix this error, can go to the troubleshooting. (https://github.com/hexojs/hexo/issues/3449) 8 – Create a new post file1$ hexo n [layout] &lt;filename&gt; Next is the structure of the project folder.1234567891011121314.├── .deploy├── public├── scaffolds| ├── draft.md| ├── page.md| └── post.md├── scripts├── source| ├── _drafts| └── _posts├── themes├── _config.yml└── package.json 9 – GenerateGenerating static files with Hexo.This will create the .html .css .js files in public folder.1$ hexo generate Hexo can watch for file changes and regenerate files immediately. Hexo will compare the SHA1 checksum of your files and only write if file changes are detected.1$ hexo generate --watch 10 – Deploy new blog(https://hexo.io/docs/deployment.html)1$ hexo deploy Before your first deployment, make sure that you have modified the deployment settings in _config.yml.See ‘7 – Set information to use Git’ (Optional)Before deployment, you can clean the cache first.12$ hexo clean$ hexo deploy 11 – Change the themeSearch the theme you want in (https://hexo.io/themes/).In terminal(Unix) or powershell(windows 10), change current work directory to the root of your project folder.12345678910111213$ git clone [The github repository address of the theme you want]# for example## download the theme code$ git clone https://github.com/cgmartin/hexo-theme-bootstrap-blog.git themes/bootstrap-blog## Set information to use the theme$ vi _config.yml~~~~~~~~~~~~~~~~~~ _config.yml ~~~~~~~~~~~~~~~~~~# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/### replace the name of theme with what you wanttheme: bootstrap-blog print1print('Hello World!')","categories":[{"name":"Technique","slug":"Technique","permalink":"https://anix30.github.io/categories/Technique/"}],"tags":[{"name":"Hexo deployment","slug":"Hexo-deployment","permalink":"https://anix30.github.io/tags/Hexo-deployment/"}],"keywords":[{"name":"Technique","slug":"Technique","permalink":"https://anix30.github.io/categories/Technique/"}]}]}